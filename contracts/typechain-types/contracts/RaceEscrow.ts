/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface RaceEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimToRace"
      | "claimToRaceFor"
      | "closeJoin"
      | "createRace"
      | "depositToRace"
      | "getRace"
      | "hasJoined"
      | "joinRace"
      | "nextRaceId"
      | "nonce"
      | "participantsOf"
      | "pendingCredits"
      | "refundAll"
      | "submitResult"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Closed"
      | "Deposited"
      | "DirectDeposit"
      | "FallbackDeposit"
      | "Joined"
      | "RaceCreated"
      | "Refunded"
      | "Resolved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimToRace",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimToRaceFor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeJoin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createRace",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToRace",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRace",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasJoined",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "joinRace",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextRaceId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "participantsOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingCredits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "refundAll",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitResult",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimToRace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimToRaceFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeJoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createRace", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToRace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasJoined", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinRace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextRaceId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participantsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refundAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitResult",
    data: BytesLike
  ): Result;
}

export namespace ClosedEvent {
  export type InputTuple = [raceId: BigNumberish];
  export type OutputTuple = [raceId: bigint];
  export interface OutputObject {
    raceId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    raceId: BigNumberish,
    from: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [raceId: bigint, from: string, amount: bigint];
  export interface OutputObject {
    raceId: bigint;
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DirectDepositEvent {
  export type InputTuple = [from: AddressLike, amount: BigNumberish];
  export type OutputTuple = [from: string, amount: bigint];
  export interface OutputObject {
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FallbackDepositEvent {
  export type InputTuple = [
    from: AddressLike,
    amount: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [from: string, amount: bigint, data: string];
  export interface OutputObject {
    from: string;
    amount: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JoinedEvent {
  export type InputTuple = [raceId: BigNumberish, runner: AddressLike];
  export type OutputTuple = [raceId: bigint, runner: string];
  export interface OutputObject {
    raceId: bigint;
    runner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RaceCreatedEvent {
  export type InputTuple = [
    raceId: BigNumberish,
    stakeWei: BigNumberish,
    joinDeadline: BigNumberish,
    organizer: AddressLike
  ];
  export type OutputTuple = [
    raceId: bigint,
    stakeWei: bigint,
    joinDeadline: bigint,
    organizer: string
  ];
  export interface OutputObject {
    raceId: bigint;
    stakeWei: bigint;
    joinDeadline: bigint;
    organizer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundedEvent {
  export type InputTuple = [raceId: BigNumberish];
  export type OutputTuple = [raceId: bigint];
  export interface OutputObject {
    raceId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResolvedEvent {
  export type InputTuple = [
    raceId: BigNumberish,
    winner: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [raceId: bigint, winner: string, amount: bigint];
  export interface OutputObject {
    raceId: bigint;
    winner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RaceEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): RaceEscrow;
  waitForDeployment(): Promise<this>;

  interface: RaceEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimToRace: TypedContractMethod<
    [raceId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimToRaceFor: TypedContractMethod<
    [user: AddressLike, raceId: BigNumberish],
    [void],
    "nonpayable"
  >;

  closeJoin: TypedContractMethod<[raceId: BigNumberish], [void], "nonpayable">;

  createRace: TypedContractMethod<
    [
      stakeWei: BigNumberish,
      joinWindowSeconds: BigNumberish,
      resultSigner: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  depositToRace: TypedContractMethod<[raceId: BigNumberish], [void], "payable">;

  getRace: TypedContractMethod<
    [raceId: BigNumberish],
    [
      [bigint, bigint, string, string, bigint, string, bigint, bigint] & {
        stakeWei: bigint;
        joinDeadline: bigint;
        organizer: string;
        resultSigner: string;
        state: bigint;
        winner: string;
        pool: bigint;
        participantCount: bigint;
      }
    ],
    "view"
  >;

  hasJoined: TypedContractMethod<
    [raceId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;

  joinRace: TypedContractMethod<[raceId: BigNumberish], [void], "payable">;

  nextRaceId: TypedContractMethod<[], [bigint], "view">;

  nonce: TypedContractMethod<[], [bigint], "view">;

  participantsOf: TypedContractMethod<
    [raceId: BigNumberish],
    [string[]],
    "view"
  >;

  pendingCredits: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  refundAll: TypedContractMethod<[raceId: BigNumberish], [void], "nonpayable">;

  submitResult: TypedContractMethod<
    [raceId: BigNumberish, winner: AddressLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimToRace"
  ): TypedContractMethod<[raceId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimToRaceFor"
  ): TypedContractMethod<
    [user: AddressLike, raceId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "closeJoin"
  ): TypedContractMethod<[raceId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createRace"
  ): TypedContractMethod<
    [
      stakeWei: BigNumberish,
      joinWindowSeconds: BigNumberish,
      resultSigner: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositToRace"
  ): TypedContractMethod<[raceId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "getRace"
  ): TypedContractMethod<
    [raceId: BigNumberish],
    [
      [bigint, bigint, string, string, bigint, string, bigint, bigint] & {
        stakeWei: bigint;
        joinDeadline: bigint;
        organizer: string;
        resultSigner: string;
        state: bigint;
        winner: string;
        pool: bigint;
        participantCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasJoined"
  ): TypedContractMethod<
    [raceId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "joinRace"
  ): TypedContractMethod<[raceId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "nextRaceId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "participantsOf"
  ): TypedContractMethod<[raceId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "pendingCredits"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "refundAll"
  ): TypedContractMethod<[raceId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitResult"
  ): TypedContractMethod<
    [raceId: BigNumberish, winner: AddressLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Closed"
  ): TypedContractEvent<
    ClosedEvent.InputTuple,
    ClosedEvent.OutputTuple,
    ClosedEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "DirectDeposit"
  ): TypedContractEvent<
    DirectDepositEvent.InputTuple,
    DirectDepositEvent.OutputTuple,
    DirectDepositEvent.OutputObject
  >;
  getEvent(
    key: "FallbackDeposit"
  ): TypedContractEvent<
    FallbackDepositEvent.InputTuple,
    FallbackDepositEvent.OutputTuple,
    FallbackDepositEvent.OutputObject
  >;
  getEvent(
    key: "Joined"
  ): TypedContractEvent<
    JoinedEvent.InputTuple,
    JoinedEvent.OutputTuple,
    JoinedEvent.OutputObject
  >;
  getEvent(
    key: "RaceCreated"
  ): TypedContractEvent<
    RaceCreatedEvent.InputTuple,
    RaceCreatedEvent.OutputTuple,
    RaceCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Refunded"
  ): TypedContractEvent<
    RefundedEvent.InputTuple,
    RefundedEvent.OutputTuple,
    RefundedEvent.OutputObject
  >;
  getEvent(
    key: "Resolved"
  ): TypedContractEvent<
    ResolvedEvent.InputTuple,
    ResolvedEvent.OutputTuple,
    ResolvedEvent.OutputObject
  >;

  filters: {
    "Closed(uint256)": TypedContractEvent<
      ClosedEvent.InputTuple,
      ClosedEvent.OutputTuple,
      ClosedEvent.OutputObject
    >;
    Closed: TypedContractEvent<
      ClosedEvent.InputTuple,
      ClosedEvent.OutputTuple,
      ClosedEvent.OutputObject
    >;

    "Deposited(uint256,address,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "DirectDeposit(address,uint256)": TypedContractEvent<
      DirectDepositEvent.InputTuple,
      DirectDepositEvent.OutputTuple,
      DirectDepositEvent.OutputObject
    >;
    DirectDeposit: TypedContractEvent<
      DirectDepositEvent.InputTuple,
      DirectDepositEvent.OutputTuple,
      DirectDepositEvent.OutputObject
    >;

    "FallbackDeposit(address,uint256,bytes)": TypedContractEvent<
      FallbackDepositEvent.InputTuple,
      FallbackDepositEvent.OutputTuple,
      FallbackDepositEvent.OutputObject
    >;
    FallbackDeposit: TypedContractEvent<
      FallbackDepositEvent.InputTuple,
      FallbackDepositEvent.OutputTuple,
      FallbackDepositEvent.OutputObject
    >;

    "Joined(uint256,address)": TypedContractEvent<
      JoinedEvent.InputTuple,
      JoinedEvent.OutputTuple,
      JoinedEvent.OutputObject
    >;
    Joined: TypedContractEvent<
      JoinedEvent.InputTuple,
      JoinedEvent.OutputTuple,
      JoinedEvent.OutputObject
    >;

    "RaceCreated(uint256,uint256,uint256,address)": TypedContractEvent<
      RaceCreatedEvent.InputTuple,
      RaceCreatedEvent.OutputTuple,
      RaceCreatedEvent.OutputObject
    >;
    RaceCreated: TypedContractEvent<
      RaceCreatedEvent.InputTuple,
      RaceCreatedEvent.OutputTuple,
      RaceCreatedEvent.OutputObject
    >;

    "Refunded(uint256)": TypedContractEvent<
      RefundedEvent.InputTuple,
      RefundedEvent.OutputTuple,
      RefundedEvent.OutputObject
    >;
    Refunded: TypedContractEvent<
      RefundedEvent.InputTuple,
      RefundedEvent.OutputTuple,
      RefundedEvent.OutputObject
    >;

    "Resolved(uint256,address,uint256)": TypedContractEvent<
      ResolvedEvent.InputTuple,
      ResolvedEvent.OutputTuple,
      ResolvedEvent.OutputObject
    >;
    Resolved: TypedContractEvent<
      ResolvedEvent.InputTuple,
      ResolvedEvent.OutputTuple,
      ResolvedEvent.OutputObject
    >;
  };
}
